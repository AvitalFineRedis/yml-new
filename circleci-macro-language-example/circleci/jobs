
@define jobs
{{job:lint}}
{{job:build}}
{{job:coverage}}
{{job:valgrind}}
{{job:platforms-build-linux-x64}}
{{job:platforms-build-linux-arm8}}
{{job:multiarch-docker}}
{{job:platforms-build-macos-x64}}
{{job:platforms-build-macos-arm8}}
{{job:deploy-artifacts}}
{{job:qa-automation}}
@end

#----------------------------------------------------------------------------------------------

@define job:lint
lint:
  docker:
    - image: redislabsmodules/llvm-toolset:latest
  steps:
    - abort_for_docs
    - checkout-all
    - setup-automation
    - run:
        name: lint
        command: |
          make setup
          make lint
@end

@define job:build
build:
  docker:
    - image: redisfab/rmbuilder:6.2.1-x64-buster
  steps:
    - build_steps:
        platform: debian
@end

@define job:coverage
coverage:
  docker:
    - image: redisfab/rmbuilder:6.2.1-x64-buster
  steps:
    - abort_for_docs
    - checkout-all
    - run:
        name: Build & Test
        command: |
          make setup
          make build COV=1 SHOW=1
          make test COV=1
          bash <(curl -s https://codecov.io/bash) -f bin/linux-x64-debug-cov/cov.info
    - store_artifacts:
        path: coverage
        destination: coverage
@end

@define job:valgrind
valgrind:
  docker:
    - image: redisfab/rmbuilder:6.2.1-x64-buster
  steps:
    - build_steps:
        platform: debian
        build_params: VALGRIND=1 -j
        test_params: VALGRIND=1 SIMPLE=1
        getredis_params: --valgrind
@end

#----------------------------------------------------------------------------------------------

@define job:platforms-build:linux-x64
@end

@define job:platforms-build:linux-arm8
arm-platforms-build:
  parameters:
    platform:
      type: string
  machine:
    image: ubuntu-2004:202101-01
  resource_class: arm.medium
  steps:
    - vm-platforms-build-steps:
        platform: <<parameters.platform>>
@end

@define job:multiarch-docker-build
@end

@define job:build:macos-x64
build-macos:
  macos:
    xcode: 11.3.0
  steps:
    - run:
        name: Set up workspace
        command: |
          sudo mkdir -p ~/workspace
          sudo chown $USER ~/workspace
    - build_steps:
        platform: macos
@end

@define job:build:macos-arm8
@end

#----------------------------------------------------------------------------------------------

@define job:deploy-artifacts
deploy-artifacts:
  parameters:
    location:
      type: string
      default: ""
  docker:
    - image: redisfab/rmbuilder:6.2.1-x64-buster
  steps:
    - abort_for_docs
    - early_return_for_forked_pull_requests
    - attach_workspace:
        at: workspace
    - run:
        name: Deploy to S3
        command: |
          cd "workspace/artifacts/<<parameters.location>>"
          du -ah --apparent-size *
          if [[ -z <<parameters.location>> ]]; then
              path="/"
          else
              path="<<parameters.location>>/"
          fi
          for f in `ls *.zip *.tgz`; do
            aws s3 cp $f s3://redismodules/$PACKAGE_NAME/$path --acl public-read
          done 
@end

#----------------------------------------------------------------------------------------------

@define job:release-automation
release-automation:
  docker:
    - image: redisfab/rmbuilder:6.2.1-x64-buster
  steps:
    - abort_for_docs
    - early_return_for_forked_pull_requests
    - checkout
    - setup-automation
    - run:
        name: Run QA Automation
        command: MODULE_VERSION="$CIRCLE_TAG" VERBOSE=1 TEST=release ./tests/qa/run
@end

@define job:nightly-automation
nightly-automation:
  docker:
    - image: redisfab/rmbuilder:6.2.1-x64-buster
  steps:
    - abort_for_docs
    - early_return_for_forked_pull_requests
    - checkout
    - setup-automation
    - run:
        name: Run QA Automation
        command: MODULE_VERSION="$CIRCLE_BRANCH" VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run
@end

# TDB: combine release-auotmation and nightly-automation
@define job:qa-automation
@end
